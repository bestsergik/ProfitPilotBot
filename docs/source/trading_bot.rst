.. ProfitPilotBot documentation master file, created by
   sphinx-quickstart on Sat Sep 23 18:37:15 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to ProfitPilotBot's documentation!
==========================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`



Trading Bot Documentation
=========================

Introduction
------------

This document outlines the structure and logic behind the cryptocurrency trading bot.
The main goal of this bot is to automate trading operations on the Binance exchange,
following a simple Moving Average Crossover strategy.

Setup
-----

Refer to README.md for setup instructions.

Code Structure
--------------

The code is structured in a modular way to ensure scalability and ease of debugging and testing.
The main components are:

- Data Retrieval: Functions to fetch historical and real-time data from Binance.
- Strategy Implementation: Functions to implement the trading strategy.
- Order Execution: Functions to place orders and manage trades.

Data Retrieval
--------------

The data retrieval part is handled by the following function:

- ``fetch_historical_data(symbol, timeframe)``:
    Fetches historical OHLCV (Open/High/Low/Close/Volume) data for a given symbol and timeframe.

Strategy Implementation
-----------------------

The core strategy is implemented by the following function:

- ``calculate_moving_averages(df)``:
    Calculates short-term and long-term moving averages on the closing prices of the historical data.

Further Work
------------

- Implement real-time data fetching to enable live trading.
- Implement order execution functions to place trades based on signals generated by the strategy.
- Implement risk management and performance evaluation modules to ensure the robustness of the bot.

.. note:: This code serves as an example and should not be used for real trading without further testing and analysis.


---

## Функция `generate_signals`

Функция `generate_signals` принимает на вход DataFrame `df`, который содержит исторические данные по определенному финансовому инструменту. Функция анализирует скользящие средние (short MA и long MA) и генерирует сигналы для покупки или продажи на основе пересечения этих скользящих средних.

- Сигнал на покупку генерируется в момент, когда короткая скользящая средняя (short MA) пересекает длинную скользящую среднюю (long MA) снизу вверх.
- Сигнал на продажу генерируется в момент, когда короткая скользящая средняя пересекает длинную скользящую среднюю сверху вниз.

Пример использования:

signals = generate_signals(historical_data)


## Функция `create_order`

Функция `create_order` принимает на вход следующие аргументы:

- `symbol` (str): символ торгуемой пары, например 'BTC/USDT'.
- `type` (str): тип ордера, например 'limit' для лимитного ордера.
- `side` (str): сторона сделки, 'buy' для покупки и 'sell' для продажи.
- `amount` (float): количество криптовалюты для покупки или продажи.
- `price` (float): цена, по которой вы хотите купить или продать криптовалюту.

Функция отправляет ордер на биржу и возвращает ответ от биржи.

Пример использования:

# Создание лимитного ордера на покупку 0.01 BTC по цене 40000 USDT
create_order('BTC/USDT', 'limit', 'buy', 0.01, 40000)


---

Управление Рисками
---------------------
Бот оснащен системой управления рисками для избегания значительных потерь в процессе торговли. Эта система включает в себя установку стоп-лоссов и тейк-профитов. 
Стоп-лосс предназначен для минимизации потерь, устанавливая лимитный ордер на продажу, если цена опускается до определенного уровня. Таким образом, бот автоматически 
продает актив, чтобы избежать дальнейших потерь. Тейк-профит, с другой стороны, позволяет боту закрыть сделку с прибылью, когда достигается определенный уровень цены.

Оптимизация и Бэктестирование
---------------------------------
Оптимизация и бэктестирование крайне важны для обеспечения эффективности бота. Бэктестирование проводится на исторических данных для проверки, как бот бы работал в прошлом. 
Это позволяет идентифицировать возможные проблемы и определить, какие стратегии могут быть наиболее эффективными. Оптимизация включает в себя настройку параметров бота для
 улучшения его производительности. Процесс оптимизации может включать в себя корректировку параметров управления рисками, выбор различных индикаторов технического анализа 
 или изменение логики торговых стратегий.
